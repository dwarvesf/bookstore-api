basePath: /api/v1
definitions:
  Auth:
    properties:
      accessToken:
        type: string
      email:
        type: string
      id:
        type: integer
    required:
    - accessToken
    - email
    - id
    type: object
  Book:
    properties:
      author:
        type: string
      id:
        type: integer
      name:
        type: string
      topic:
        $ref: '#/definitions/Topic'
    required:
    - id
    - name
    type: object
  BookResponse:
    properties:
      data:
        $ref: '#/definitions/Book'
    type: object
  BooksResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Book'
        type: array
      metadata:
        $ref: '#/definitions/Metadata'
    type: object
  CreateBookRequest:
    properties:
      author:
        type: string
      name:
        type: string
      topicId:
        type: integer
    required:
    - name
    type: object
  ErrorDetail:
    properties:
      error:
        type: string
      field:
        type: string
    required:
    - error
    - field
    type: object
  ErrorResponse:
    properties:
      code:
        type: string
      error:
        type: string
      errors:
        items:
          $ref: '#/definitions/ErrorDetail'
        type: array
      traceId:
        type: string
    required:
    - code
    - error
    - traceId
    type: object
  LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  LoginResponse:
    properties:
      data:
        $ref: '#/definitions/Auth'
    type: object
  Me:
    properties:
      email:
        type: string
      id:
        type: integer
    required:
    - email
    - id
    type: object
  MeResponse:
    properties:
      data:
        $ref: '#/definitions/Me'
    type: object
  Message:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  MessageResponse:
    properties:
      data:
        $ref: '#/definitions/Message'
    type: object
  Metadata:
    properties:
      hasNext:
        type: boolean
      page:
        type: integer
      pageSize:
        type: integer
      sort:
        type: integer
      totalPages:
        type: integer
      totalRecords:
        type: integer
    required:
    - page
    - pageSize
    - totalPages
    - totalRecords
    type: object
  SignupRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      fullName:
        type: string
      password:
        type: string
    required:
    - email
    - fullName
    - password
    type: object
  Topic:
    properties:
      code:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  TopicsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Topic'
        type: array
    type: object
  UpdateBookRequest:
    properties:
      author:
        type: string
      name:
        type: string
      topicId:
        type: integer
    required:
    - name
    type: object
  UpdatePasswordRequest:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    required:
    - newPassword
    - oldPassword
    type: object
  UpdateUserRequest:
    properties:
      avatar:
        type: string
      fullName:
        type: string
    type: object
  User:
    properties:
      avatar:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: integer
    required:
    - avatar
    - email
    - fullName
    - id
    type: object
  UserResponse:
    properties:
      data:
        $ref: '#/definitions/User'
    type: object
info:
  contact:
    email: vandatpro2000@gmail.com
    name: DatPV
    url: https://d.foundation
  description: This is api document for BOOKSTORE API project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: BOOKSTORE API DOCUMENT
  version: v0.0.1
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login to portal by email
      operationId: login
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Login to portal
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Signup
      operationId: signup
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Signup
      tags:
      - Auth
  /books:
    get:
      consumes:
      - application/json
      description: Get list of books
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Page Size
        in: query
        name: pageSize
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Query
        in: query
        name: query
        type: string
      - description: Topic ID
        in: query
        name: topicId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BooksResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list of books
      tags:
      - Book
    post:
      consumes:
      - application/json
      description: Create new book
      parameters:
      - description: Create Book Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new book
      tags:
      - Book
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete book by id
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete book by id
      tags:
      - Book
    put:
      consumes:
      - application/json
      description: Update book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Book Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BookResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update book
      tags:
      - Book
  /me:
    get:
      consumes:
      - application/json
      description: Retrieve my information
      operationId: getMe
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Retrieve my information
      tags:
      - User
  /topics:
    get:
      consumes:
      - application/json
      description: Get all topics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TopicsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all topics
      tags:
      - Topic
  /users:
    put:
      consumes:
      - application/json
      description: Update user
      operationId: updateUser
      parameters:
      - description: Update user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - User
  /users/password:
    put:
      consumes:
      - application/json
      description: Update user's password
      operationId: updatePassword
      parameters:
      - description: Update user
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user's password
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
